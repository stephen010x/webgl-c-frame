#include <stdint.h>

/* This is a header library.
 * The programmer can optionally 
 * create a c counterpart file
 */

#define FORCE_INLINE __attribute__((always_inline))



//////////////////////////////////////////////
//////                             //////////
////// TWO MEMBER VECTORS         //////////
//////                           //////////
//////////////////////////////////////////


///////////////////////////
// SINGLE WORD TYPES /////
/////////////////////////

typedef union {
    struct {
        uint8_t x: 4;
        uint8_t y: 4;
    } u;
    struct {
        uint8_t i: 4;
        uint8_t j: 4;
    } u;
    struct {
        int8_t x: 4;
        int8_t y: 4;
    };
    struct {
        int8_t i: 4;
        int8_t j: 4;
    };
    uint8_t uraw;
    int8_t raw;
} vect2_8;



///////////////////////////
// MULTI WORD TYPES  /////
/////////////////////////

typedef union {
    struct {
        uint8_t x;
        uint8_t y;
    } u;
    struct {
        uint8_t i;
        uint8_t j;
    } u;
    struct {
        int8_t x;
        int8_t y;
    };
    struct {
        int8_t i;
        int8_t j;
    };
    uint8_t uraw[2];
    int8_t raw[2];
} vect2_16;


typedef union {
    struct {
        uint16_t x;
        uint16_t y;
    } u;
    struct {
        uint16_t i;
        uint16_t j;
    } u;
    struct {
        int16_t x;
        int16_t y;
    };
    struct {
        int16_t i;
        int16_t j;
    };
    uint16_t uraw[2];
    int16_t raw[2];
} vect2_32;


typedef union {
    struct {
        uint32_t x;
        uint32_t y;
    } u;
    struct {
        uint32_t i;
        uint32_t j;
    } u;
    struct {
        int32_t x;
        int32_t y;
    };
    struct {
        int32_t i;
        int32_t j;
    };
    uint32_t uraw[2];
    int32_t raw[2];
} vect2_64;


typedef union {
    struct {
        uint64_t x;
        uint64_t y;
    } u;
    struct {
        uint64_t i;
        uint64_t j;
    } u;
    struct {
        int64_t x;
        int64_t y;
    };
    struct {
        int64_t i;
        int64_t j;
    };
    uint64_t uraw[2];
    int64_t raw[2];
} vect2_128;







//////////////////////////////////////////////
//////                             //////////
////// THREE MEMBER VECTORS       //////////
//////                           //////////
//////////////////////////////////////////


///////////////////////////
// SINGLE WORD TYPES /////
/////////////////////////

// each member ranges from 0-15
// defaults to signed
typedef union {
    struct {
        uint16_t x:  4;
        uint16_t _1: 2;
        uint16_t y:  4;
        uint16_t _2: 2;
        uint16_t z:  4;
    } u;
    struct {
        uint16_t i:  4;
        uint16_t _3: 2;
        uint16_t j:  4;
        uint16_t _4: 2;
        uint16_t k:  4;
    } u;
    struct {
        int16_t x:  4;
        int16_t _1: 2;
        int16_t y:  4;
        int16_t _2: 2;
        int16_t z:  4;
    };
    struct {
        int16_t i:  4;
        int16_t _1: 2;
        int16_t j:  4;
        int16_t _2: 2;
        int16_t k:  4;
    };
    uint16_t uraw;
    int16_t raw;
} vect3_16;


typedef union {
    struct {
        uint32_t x: 10;
        uint32_t y: 10;
        uint32_t z: 10;
    } u;
    struct {
        uint32_t i: 10;
        uint32_t j: 10;
        uint32_t k: 10;
    } u;
    struct {
        int32_t x: 10;
        int32_t y: 10;
        int32_t z: 10;
    };
    struct {
        int32_t i: 10;
        int32_t j: 10;
        int32_t k: 10;
    };
    uint32_t uraw;
    int32_t raw;
} vect3_32;


typedef union {
    struct {
        uint64_t x: 21;
        uint64_t y: 21;
        uint64_t z: 21;
    } u;
    struct {
        uint64_t i: 21;
        uint64_t j: 21;
        uint64_t k: 21;
    } u;
    struct {
        int64_t x: 21;
        int64_t y: 21;
        int64_t z: 21;
    };
    struct {
        int64_t i: 21;
        int64_t j: 21;
        int64_t k: 21;
    };
    uint64_t uraw;
    int64_t raw;
} vect3_64;




///////////////////////////
// MULTI WORD TYPES  /////
/////////////////////////

#define VECT3_TYPEGEN(__type) \
typedef union {     \
    struct {        \
        __type x;   \
        __type y;   \
        __type z;   \
    };              \
    struct {        \
        __type i;   \
        __type j;   \
        __type k;   \
    };              \
    __type raw[3];  \
}



typedef union {
    struct {
        uint8_t x;
        uint8_t y;
        uint8_t z;
    } u;
    struct {
        uint8_t i;
        uint8_t j;
        uint8_t k;
    } u;
    struct {
        int8_t x;
        int8_t y;
        int8_t z;
    };
    struct {
        int8_t i;
        int8_t j;
        int8_t k;
    };
    uint8_t uraw[3];
    int8_t raw[3];
} vect3_24;


typedef union {
    struct {
        uint16_t x;
        uint16_t y;
        uint16_t z;
    } u;
    struct {
        uint16_t i;
        uint16_t j;
        uint16_t k;
    } u;
    struct {
        int16_t x;
        int16_t y;
        int16_t z;
    };
    struct {
        int16_t i;
        int16_t j;
        int16_t k;
    };
    uint16_t uraw[3];
    int16_t raw[3];
} vect3_48;








FORCE_INLINE void vect_test() {
    
}
