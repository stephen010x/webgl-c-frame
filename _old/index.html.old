<!DOCTYPE html>
<!-- malloc_copy.html -->
<html>
  <head></head>
  <body>
    <script type="module">

        console.log("hell");
      // allow use of async/await
      (async () => {
        // Build the WebAssembly instance.
        const memory = new WebAssembly.Memory({ initial: 2 });
        const response = await fetch('./bin/bin.wasm');
        const bytes = await response.arrayBuffer();
        const { instance } = await WebAssembly.instantiate(bytes, {
          env: { memory: memory },
        });
        //const { instance } = await WebAssembly.instantiate(bytes);

        console.log("fuck");

        // Text to copy.
        const text = 'Hello from JavaScript!';

        // Configure shared memory.
        const view1 = new Uint8Array(memory.buffer);
        const pInput = instance.exports.malloc(1024);
        // malloc causes memory to grow, invalidating old view
        const view2 = new Uint8Array(memory.buffer);

        encode(view2, pInput, text);

        const pOutput = instance.exports.malloc_copy(pInput, text.length);

        console.log('copy', decode(view2, pOutput));

        // Should free pOutput and pInput
      })();

      // Encode string into memory starting at address base.
      const encode = (memory, base, string) => {
        for (let i = 0; i < string.length; i++) {
          memory[base + i] = string.charCodeAt(i);
        }

        memory[base + string.length] = 0;
      };

      // Decode a string from memory starting at address base.
      const decode = (memory, base) => {
        let cursor = base;
        let result = '';

        while (memory[cursor] !== 0) {
          result += String.fromCharCode(memory[cursor++]);
        }

        return result;
      };
    </script>
  </body>
</html>
